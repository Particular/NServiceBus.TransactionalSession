name: CI
on:
  push:
    branches:
      - main
      - release-*
  pull_request:
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    name: ${{ matrix.os-name }}-${{ matrix.engines }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2019, ubuntu-20.04 ]
        engines: [
          AzureStorage,
          MongoDB,
          SqlServer,
          CosmosDB,
          RavenDB,
        ]
        include:
          - engines: AzureStorage
            upload-packages: true
          # Add os-name alias for job name
          - os: windows-2019
            os-name: Windows
          - os: ubuntu-20.04
            os-name: Linux
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2.1.0
        with:
          dotnet-version: 6.0.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        if: matrix.upload-packages && matrix.name == 'Windows'
        uses: actions/upload-artifact@v3.1.0
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Azure login
        uses: azure/login@v1.4.5
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup RavenDB server (Linux)
        if: matrix.name == 'Linux' && contains(matrix.engines, 'RavenDB')
        run: docker run --rm -d -p 8080:8080 -p 38888:38888 --name RavenDb -e RAVEN_Setup_Mode=None -e RAVEN_License_Eula_Accepted=true -e RAVEN_Security_UnsecuredAccessAllowed=PrivateNetwork ravendb/ravendb
        env:
          RavenDBConnectionString: "http://localhost:8080"
      - name: Stop built-in MongoDB server (Windows)
        if: matrix.name == 'Windows' && contains(matrix.engines, 'MongoDB')
        shell: pwsh
        run:  |
          # Need to stop default MongoDB server as it does not support replication
          Stop-Service -Name "MongoDB"
          Start-Sleep -s 5
      - name: Setup MongoDB server (Windows)
        if: matrix.name == 'Windows' && contains(matrix.engines, 'MongoDB')
        shell: pwsh
        run: |
          mkdir /temp/mongodb
          # We need a MongoDB server started with a replica set configuration:
          Start-Process mongod -ArgumentList "--dbpath /temp/mongodb --replSet tr0 --bind_ip 127.0.0.1" -WindowStyle Hidden
          Start-Sleep -s 5
          mongo --eval 'rs.initiate()'
      - name: Setup MongoDB server (Linux)
        if: matrix.name == 'Linux' && contains(matrix.engines, 'MongoDB')
        uses: supercharge/mongodb-github-action@1.7.0
        with:
          mongodb-replica-set: tr0
      - name: Setup SQL Server
        if: contains(matrix.engines, 'SqlServer')
        uses: Particular/install-sql-server-action@v1.0.0
        with:
          connection-string-env-var: SQLServerConnectionString
          catalog: nservicebus
      - name: Setup Cosmos DB
        if: contains(matrix.engines, 'CosmosDB')
        uses: Particular/setup-cosmosdb-action@v1.0.0
        with:
          connection-string-name: CosmosDBPersistence_ConnectionString
          azure-credentials: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          tag: TransactionalSession
      - name: Setup Azure Storage Cosmos API
        if: contains(matrix.engines, 'AzureStorage')
        uses: Particular/setup-cosmosdb-action@v1.0.0
        with:
          connection-string-name: AzureTableServerConnectionString
          azure-credentials: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          tag: TransactionalSession
          api: Table
      - name: Run tests
        uses: Particular/run-tests-action@v1.3.0