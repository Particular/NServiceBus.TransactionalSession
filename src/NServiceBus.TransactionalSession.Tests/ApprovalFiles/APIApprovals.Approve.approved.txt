[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.TransactionalSession.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.TransactionalSession.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus.TransactionalSession
{
    public interface ITransactionalSession : System.IDisposable
    {
        string SessionId { get; }
        NServiceBus.Persistence.ISynchronizedStorageSession SynchronizedStorageSession { get; }
        System.Threading.Tasks.Task Commit(System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task Publish(object message, NServiceBus.PublishOptions publishOptions, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus.PublishOptions publishOptions, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task Send(object message, NServiceBus.SendOptions sendOptions, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus.SendOptions sendOptions, System.Threading.CancellationToken cancellationToken = default);
    }
    public static class OpenSessionExtensions
    {
        public static System.Threading.Tasks.Task OpenCosmosDBSession(this NServiceBus.TransactionalSession.ITransactionalSession session, string partitionKey, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "containerName",
                "partitionKeyPath"})] System.ValueTuple<string, string> container = default, NServiceBus.TransactionalSession.OpenSessionOptions options = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task OpenMongoDBSession(this NServiceBus.TransactionalSession.ITransactionalSession session, NServiceBus.TransactionalSession.OpenSessionOptions options = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task OpenRavenDBSession(this NServiceBus.TransactionalSession.ITransactionalSession session, System.Collections.Generic.IDictionary<string, string> multiTenantConnectionContext = null, NServiceBus.TransactionalSession.OpenSessionOptions options = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task OpenSqlSession(this NServiceBus.TransactionalSession.ITransactionalSession session, string tenantIdHeaderName = null, string tenantId = null, NServiceBus.TransactionalSession.OpenSessionOptions options = null, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class OpenSessionOptions : NServiceBus.Extensibility.IExtendable
    {
        public OpenSessionOptions() { }
        public NServiceBus.Extensibility.ContextBag Extensions { get; }
        public System.TimeSpan MaximumCommitDuration { get; set; }
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; }
    }
    public static class TransactionalSessionExtensions
    {
        public static System.Threading.Tasks.Task Publish(this NServiceBus.TransactionalSession.ITransactionalSession session, object message, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task Publish<T>(this NServiceBus.TransactionalSession.ITransactionalSession session, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task Publish<T>(this NServiceBus.TransactionalSession.ITransactionalSession session, System.Action<T> messageConstructor, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task Send(this NServiceBus.TransactionalSession.ITransactionalSession session, object message, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task Send(this NServiceBus.TransactionalSession.ITransactionalSession session, string destination, object message, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task Send<T>(this NServiceBus.TransactionalSession.ITransactionalSession session, System.Action<T> messageConstructor, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task Send<T>(this NServiceBus.TransactionalSession.ITransactionalSession session, string destination, System.Action<T> messageConstructor, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SendLocal(this NServiceBus.TransactionalSession.ITransactionalSession session, object message, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SendLocal<T>(this NServiceBus.TransactionalSession.ITransactionalSession session, System.Action<T> messageConstructor, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class TransactionalSessionFeature : NServiceBus.Features.Feature
    {
        public TransactionalSessionFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
}
namespace NServiceBus
{
    public static class TransactionalSessionConfigurationExtensions
    {
        public static void EnableTransactionalSession(this NServiceBus.EndpointConfiguration endpointConfiguration) { }
    }
}